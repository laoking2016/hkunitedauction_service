pipeline {
    
    agent any
	
	triggers { 
		upstream(upstreamProjects: 'dev_maindatacenter,', threshold: hudson.model.Result.SUCCESS) 
	}
	
	parameters {
	
        string(name: 'sonarurl', defaultValue: 'http://114.115.200.169:8082/sonarqube', description: 'Sonar web url')
		
		string(name: 'sonartoken', defaultValue: '7496d49c1adc10687c5ab50021e37e1e5bb80b26', description: 'Sonar web token')
		
		string(name: 'servicename', defaultValue: 'membercenter.service', description: 'Service name')
		
		string(name: 'serviceport', defaultValue: '8666', description: 'Service port')
		
		string(name: 'version', defaultValue: '1.0', description: 'Service version')
		
		string(name: 'host', defaultValue: '192.168.1.105', description: 'Web Server machine host')
		
		string(name: 'hostuser', defaultValue: 'develop', description: 'Web Server machine user')
		
		string(name: 'dburl', defaultValue: 'jdbc:mysql://192.168.1.105:3306/membercenter?serverTimezone=UTC&generateSimpleParameterMetadata=true', description: 'Database URL')
		
		string(name: 'dbname', defaultValue: 'membercenter', description: 'Database User Name')
		
		string(name: 'dbpassword', defaultValue: 'membercenter', description: 'Database User Password')
		
		string(name: 'basecenterurl', defaultValue: 'http://192.168.1.105:8663', description: 'Basecenter URL')
		
		string(name: 'maindatacenterurl', defaultValue: 'http://192.168.1.105:8664', description: 'Maindatacenter URL')
		
		booleanParam(name: 'is_os', defaultValue: true, description: 'Deploy To OS Envorment')
		
		booleanParam(name: 'is_docker', defaultValue: false, description: 'Deploy To Container Envorment')
		
		string(name: 'repositoryHost', defaultValue: '192.168.0.2', description: 'Docker Image Repository Host')
    }

    stages {	
	
		stage('complie') {
            steps {
                sh 'mvn clean compile'
            }
        }
		
		stage('static code test') {
			steps {
				 sh 'mvn sonar:sonar -Dsonar.projectKey=$servicename -Dsonar.projectName=$servicename \
				 -Dsonar.projectVersion=$version -Dsonar.sourceEncoding=UTF-8 \
				 -Dsonar.exclusions=src/test/** -Dsonar.sources=src/ -Dsonar.java.binaries=target/classes \
				 -Dsonar.host.url=$sonarurl -Dsonar.login=$sonartoken'
			}
		}
	
		stage('unit test') {
            steps {
                sh 'mvn test'
            }
        }
		
		stage('deploy') {
            steps {
				sh 'mvn -B -DskipTests deploy -f ./membercenter.api/pom.xml'
				sh 'mvn -B -DskipTests deploy -f ./membercenter.orm/pom.xml'
                sh 'mvn -B -DskipTests package spring-boot:repackage -f ./membercenter.service/pom.xml'
            }
        }	

		stage('Deliver OS') { 
		
			when {
                expression { params.is_os }
            }
		
            steps {
				sh 'chmod 777 ./jenkins/scripts/deliver.sh'
                sh './jenkins/scripts/deliver.sh $servicename $serviceport $host $hostuser $version $dburl $dbname $dbpassword $basecenterurl $maindatacenterurl' 
            }
        }	

		stage('Deliver docker') { 
		
			when {
                expression { params.is_docker }
            }
		
            steps {
				sh 'chmod 777 ./docker/scripts/deliver.sh'
                sh './docker/scripts/deliver.sh $repositoryHost $servicename' 
            }
        }	

    }
	
}
